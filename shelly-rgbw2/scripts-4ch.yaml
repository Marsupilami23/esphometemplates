substitutions:
  # Timing Configurations
  timing_timer_duration: "5s"
  timing_dimming_step: "0.5%"
  timing_dimming_time: "10ms"
  master_light: "light_ch1"

# Allow importing this package
dashboard_import:
  package_import_url: "github://mariodivece/esphometemplates/shelly-rgbw2/scripts-4ch.yaml@main"
  import_full_config: false

script:

  # Stops both, dim-up and dim-down limiting timers.
  - id: script_stop_dimming
    then:
      - script.stop: script_dimming_timer
      - script.stop: script_start_dimming_down
      - script.stop: script_start_dimming_up

  # Simple timer that limits the maximum time dim-down is executed.
  - id: script_dimming_timer
    mode: restart
    then:
      - delay: ${timing_timer_duration}

  # Executes while timer is running, light is on and brightness is in range
  - id: script_start_dimming_down
    mode: single
    then:
      - script.stop: script_start_dimming_up
      - script.execute: script_dimming_timer
      - script.execute:
          id: script_sync_lights
          immediate: true
      - while:
          condition:
            and:
              # only run while timer is running and brightness >= 1%
              - light.is_on: ${master_light}
              - script.is_running: script_dimming_timer
              - lambda: |-
                  auto color_values = id(${master_light}).remote_values;
                  return color_values.get_brightness() >= 0.01;
          then:
            - light.dim_relative:
                id: ${master_light}
                relative_brightness: -${timing_dimming_step}
                transition_length: ${timing_dimming_time}
            - script.execute:
                id: script_sync_lights
                immediate: false
            - delay: ${timing_dimming_time}
            
  # Executes while timer is running, light is on and brightness is in range
  - id: script_start_dimming_up
    mode: single
    then:
      - script.stop: script_start_dimming_down
      - script.execute: script_dimming_timer
      - script.execute:
          id: script_sync_lights
          immediate: true
      - while:
          # only run while timer is running and brightness <= 99.9%
          condition:
            and:
              - light.is_on: ${master_light}
              - script.is_running: script_dimming_timer
              - lambda: |-
                  auto color_values = id(${master_light}).remote_values;
                  return color_values.get_brightness() <= 0.999;
          then:
            - light.dim_relative:
                id: ${master_light}
                relative_brightness: ${timing_dimming_step}
                transition_length: ${timing_dimming_time}
            - script.execute:
                id: script_sync_lights
                immediate: false
            - delay: ${timing_dimming_time}

  # Toggles the light on or off, depending on current state
  - id: script_dimmer_toggle
    mode: single
    then:
      - script.execute: script_stop_dimming
      - if:
          condition:
            light.is_on: ${master_light}
          then:
            - light.turn_off: ${master_light}
            - script.execute:
                id: script_sync_lights
                immediate: false
          else:
            - light.turn_on:
                id: ${master_light}
                brightness: !lambda |-
                  return id(${master_light}).remote_values.get_brightness();
            - script.execute:
                id: script_sync_lights
                immediate: false

  # Makes all lights the same state as the master light
  # using the immediate (current) values and not target (remote) values
  - id: script_sync_lights
    mode: restart
    parameters:
      immediate: bool
    then:
      lambda: |-
        auto master_state = id(${master_light});
        auto color_values = master_state->remote_values; // immediate ? master_state->current_values : master_state->remote_values;
        auto transition_length = 10; //immediate ? 0 : master_state->get_default_transition_length();
        LightState* lights[] = {id(light_ch1), id(light_ch2), id(light_ch3), id(light_ch4)};

        for (int i = 0; i < 4; i++) {
          // skip ove the master light via reference comparison
          if (lights[i] == master_state) {
            continue;
          }
          
          lights[i]->make_call()
            .from_light_color_values(color_values)
            .set_transition_length(transition_length)
            .perform();
        }
