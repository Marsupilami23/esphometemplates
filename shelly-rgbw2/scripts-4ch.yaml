substitutions:
  # Timing Configurations
  timing_timer_duration: "5s"
  timing_dimming_step: "0.5%"
  timing_dimming_time: "10ms"
  master_light: "light_ch1"

# Allow importing this package
dashboard_import:
  package_import_url: "github://mariodivece/esphometemplates/shelly-rgbw2/scripts-4ch.yaml@main"
  import_full_config: false

script:

  # Stops both, dim-up and dim-down limiting timers.
  - id: script_stop_dimming
    then:
      - script.stop: script_dimming_timer
      - script.stop: script_start_dimming_down
      - script.stop: script_start_dimming_up

  # Simple timer that limits the maximum time dim-down is executed.
  - id: script_dimming_timer
    mode: restart
    then:
      - delay: ${timing_timer_duration}

  # Executes while timer is running, light is on and brightness is in range
  - id: script_start_dimming_down
    mode: single
    then:
      - script.stop: script_start_dimming_up
      - script.execute: script_dimming_timer
      - script.execute: script_sync_lights
      - while:
          condition:
            and:
              # only run while timer is running and brightness >= 1%
              - light.is_on: ${master_light}
              - script.is_running: script_dimming_timer
              - lambda: !-
                  auto light_state = id(${master_light});
                  auto color_Values = global_api_server->is_connected()
                    ? light_state.remote_values
                    : light_state.current_values;

                  return color_values.get_brightness() >= 0.01;
          then:
            - light.dim_relative:
                id: ${master_light}
                relative_brightness: -${timing_dimming_step}
                transition_length: ${timing_dimming_time}
            - script.execute: script_sync_lights
            - delay: ${timing_dimming_time}
            
  # Executes while timer is running, light is on and brightness is in range
  - id: script_start_dimming_up
    mode: single
    then:
      - script.stop: script_start_dimming_down
      - script.execute: script_dimming_timer
      - script.execute: script_sync_lights
      - while:
          # only run while timer is running and brightness <= 99.9%
          condition:
            and:
              - light.is_on: ${master_light}
              - script.is_running: script_dimming_timer
              - lambda: !-
                  auto light_state = id(${master_light});
                  auto color_Values = global_api_server->is_connected()
                    ? light_state.remote_values
                    : light_state.current_values;

                  return color_values.get_brightness() <= 0.999;
          then:
            - light.dim_relative:
                id: ${master_light}
                relative_brightness: ${timing_dimming_step}
                transition_length: ${timing_dimming_time}
            - script.execute: script_sync_lights
            - delay: ${timing_dimming_time}

  # Toggles the light on or off, depending on current state
  - id: script_dimmer_toggle
    mode: single
    then:
      - script.execute: script_stop_dimming
      - if:
          condition:
            light.is_on: ${master_light}
          then:
            - light.turn_off: ${master_light}
            - script.execute: script_sync_lights
          else:
            - light.turn_on:
                id: ${master_light}
                brightness: !lambda |-
                  auto light_state = id(${master_light});
                  auto brightness = global_api_server->is_connected()
                    ? light_state.remote_values.get_brightness()
                    : 0.8;
                  return birghtness;
            - script.execute: script_sync_lights

  # Makes all lights the same state as the master light
  - id: script_sync_lights
    mode: restart
    then:
      lambda: |-
        // get current values from master light
        // without round-tripping remote values
        auto light_state = id(${master_light});
        auto color_Values = light_state.current_values;

        // make them all the same
        id(light_ch1).make_call().from_light_color_values(color_values).perform();
        id(light_ch2).make_call().from_light_color_values(color_values).perform();
        id(light_ch3).make_call().from_light_color_values(color_values).perform();
        id(light_ch4).make_call().from_light_color_values(color_values).perform();
