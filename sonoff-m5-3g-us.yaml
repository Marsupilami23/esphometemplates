# example taken from https://community.home-assistant.io/t/what-is-dashboard-import/422519/7
# TODO: Enable virtual events: https://community.home-assistant.io/t/double-click-event-from-a-rocker-switch/476060/7
substitutions:
  usemac: "true"
  friendly: "Sonoff Switchman M5 3G US"
  uniquename: "switch-m5-3g"
  loglevel: DEBUG
  apikey: !secret esp_key
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password
  ota_password: !secret ota_password
  device_name: "M53G"
  device_make: "Sonoff"
  sw_version: "2024.2.3"

esphome:
  name: "${uniquename}"
  friendly_name: "${friendly}"
  comment: "${device_name} by ${device_make}"
  name_add_mac_suffix: ${usemac}
  min_version: "2023.2.0"
  project:
    name: "${device_make}.${device_name}"
    version: "${sw_version}"

esp32:
  board: esp32dev
  framework:
    type: arduino

dashboard_import:
  package_import_url: github://mariodivece/esphometemplates/sonoff-m5-3g-us.yaml@main
  import_full_config: false

# Enable logging
logger:
  level: "${loglevel}"

# Enable Home Assistant API
api:
  encryption:
    key: "${apikey}"

# Enable OTA
ota:
  safe_mode: true
  password: !secret ota_password

# Enable WiFi and AP for captive portal
wifi:
  fast_connect: false
  power_save_mode: none
  ssid: "${wifi_ssid}"
  password: "${wifi_password}"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${uniquename}-setup"
    password: "${wifi_password}"

captive_portal:

# diagnostic output
text_sensor:
  - platform: template
    name: "Deployment Version"
    lambda: return {"${sw_version}"};
    icon: "mdi:tag"
    entity_category: diagnostic
  - platform: wifi_info
    ip_address:
      id: ip_address
      name: "IP Address"
      icon: "mdi:wan"
      
sensor:
  - platform: template
    id: internal_temp
    name: "Internal Temperature"
    icon: "mdi:thermometer"
    unit_of_measurement: "Â°C"
    entity_category: diagnostic
    disabled_by_default: true
    lambda: return temperatureRead();

  - platform: wifi_signal
    name: "RSSI"
    id: sensor_rssi
    update_interval: 90s
    entity_category: "diagnostic"

  - platform: uptime
    name: "Uptime"
    id: sensor_uptime
    update_interval: 300s
    entity_category: "diagnostic"
    
button:
  - platform: restart
    name: "Restart"
    id: button_restart

switch:
  - platform: gpio
    name: "Relay A"
    pin: GPIO23
    id: relay_a

  - platform: gpio
    name: "Relay B"
    pin: GPIO19
    id: relay_b

  - platform: gpio
    name: "Relay C"
    pin: GPIO22
    id: relay_c

  - platform: template
    name: "Relay A Deceoupling"
    id: relay_a_decoupled
    optimistic: True
    restore_mode: RESTORE_DEFAULT_OFF
    icon: 'mdi:link-box-outline'
    entity_category: 'config'

output:
  - platform: ledc
    id: pwm_output
    pin: GPIO18
    frequency: 1000 Hz

binary_sensor:
  - platform: status
    name: "Status"
    id: sensor_status

  - platform: template
    name: "API connected"
    id: sensor_api_connected
    internal: True
    entity_category: 'diagnostic'
    device_class: 'connectivity'
    lambda: return global_api_server->is_connected();
    on_press:
      - light.turn_off: led_status
    on_release:
      - light.turn_on: led_status

  - platform: gpio
    name: "Button A"
    pin:
      number: GPIO04
      mode: INPUT_PULLUP
      inverted: true
    on_press:
      - switch.toggle: relay_a

  - platform: gpio
    name: "Button B"
    pin:
      number: GPIO00
      mode: INPUT_PULLUP
      inverted: true
    on_press:
      - switch.toggle: relay_b

  - platform: gpio
    name: "Button C"
    pin:
      number: GPIO15
      mode: INPUT_PULLUP
      inverted: true
    on_press:
      - switch.toggle: relay_c

light:
  - platform: status_led
    name: "LED"
    id: led_status
    pin:
      number: GPIO05
      inverted: True
    internal: True
    restore_mode: ALWAYS_OFF

  - platform: monochromatic
    output: pwm_output
    name: "Off State Brightness"
    restore_mode: RESTORE_DEFAULT_OFF
    icon: 'mdi:led-outline'
    entity_category: 'config'
