# ESPHome Firmware
# Sonoff D1 Dimmer
# Copyright (c) 2024 Mario Di Vece
# License: [MIT](https://opensource.org/license/mit/)
# Decription:
# Aims to provide a feature-rich, production-ready firmware for this compact
# and inexpensive device.
# For the below example, you need to keep the following entries in your secrets.yaml file:
#  - wifi_ssid: "<secret>"
#  - wifi_password: "<secret>"
#  - ota_password: "<secret>"
#  - esp_key: "<32-byte-base-64-secret>"
# 
# Example file (lab-office-dimr-003.yaml)
# 
# substitutions:
#  device_site: "lab"
#  device_location: "office"
#  device_location_name: "Office"
#  device_type: "dimr"
#  device_type_name: "Dimmer"
#  device_number: "004"
#  device_ip: "192.168.1.31"
#
# packages:
#   base_package:
#     url: https://github.com/mariodivece/esphometemplates/
#     ref: main
#     file: sonoff-d1.yaml
#     refresh: 0d
#

substitutions:
  # User-required substitutions
  device_site: "home"
  device_location: "bedroom01"
  device_location_name: "Bedroom 1"
  device_type: "dimr"
  device_type_name: "Dimmer"
  device_number: "044"
  device_ip: "0.0.0.0"

  # Project Substitutions (not intended for user substitution)
  device_name: "D1"
  device_make: "Sonoff"
  sw_version: "2024.2.9"

  # Adjust package URL to point to this file
  package_url: "github://mariodivece/esphometemplates/sonoff-d1.yaml@main"

  # Diagnostics Substitutions
  loglevel: INFO
  timezone: "America/Mexico_City"

  # WiFi Substitutions
  apikey: !secret esp_key
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password
  ota_password: !secret ota_password

# Allow importing this package
dashboard_import:
  package_import_url: ${package_url}
  import_full_config: false

# Import packages
packages:
  standard_package:
    url: https://github.com/mariodivece/esphometemplates/
    ref: main
    refresh: 0d
    files:
      - standard/package-project.yaml
      - standard/package-diagnostics.yaml
      - standard/package-wifi.yaml

# Define the board for the compiler
esp8266:
  board: esp8285
  restore_from_flash: true

script:
  - id: configure_remote
    parameters:
      is_enabled: bool
    then:
      lambda: |-
        Component* ptr = id(d1_controller);
        static_cast<esphome::sonoff_d1::SonoffD1Output*>(ptr)->set_use_rm433_remote(is_enabled);

# Configuration option to use RM433 Sonoff Remote
switch:
  - platform: template
    id: config_use_remote
    name: "Use RM433 Remote"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    icon: 'mdi:remote'
    entity_category: 'config'
    on_turn_on:
      then:
        - script.execute:
            id: configure_remote
            is_enabled: true
    on_turn_off:
      then:
        - script.execute:
            id: configure_remote
            is_enabled: false

number:
  # Configuration option for minimum level
  - platform: template
    id: config_level_min
    name: "Min. Level"
    optimistic: true
    min_value: 0
    max_value: 99
    step: 1
    mode: slider
    restore_value: true
    initial_value: 0
    icon: 'mdi:brightness-5'
    entity_category: 'config'
    on_value:
      lambda: |-
        auto limiter = id(config_level_max);
        if (x >= limiter->state) {
          auto call = limiter->make_call();
          call.set_value(x + 1);
          call.perform();
        }
        Component* ptr = id(d1_controller);
        static_cast<esphome::sonoff_d1::SonoffD1Output*>(ptr)->set_min_value(x);

  # Configuration option for maximum level
  - platform: template
    id: config_level_max
    name: "Max. Level"
    optimistic: true
    min_value: 1
    max_value: 100
    step: 1
    mode: slider
    restore_value: true
    initial_value: 100
    icon: 'mdi:brightness-7'
    entity_category: 'config'
    on_value:
      lambda: |-
        auto limiter = id(config_level_min);
        if (x <= limiter->state) {
          auto call = limiter->make_call();
          call.set_value(x - 1);
          call.perform();
        }
        Component* ptr = id(d1_controller);
        static_cast<esphome::sonoff_d1::SonoffD1Output*>(ptr)->set_max_value(x);

# D1 dimmer uses hardware serial port
# on the default pins @ 9600 bps to the chip
# that actually controls the dimmer and,
# optionally, the RF remote
uart:
  rx_pin: RX
  tx_pin: TX
  baud_rate: 9600

# And finally the light component
# gamma correction equal to zero gives linear scale,
# exactly what's needed for this device
light:
  - platform: sonoff_d1
    id: d1_controller
    use_rm433_remote: false
    name: Brightness
    restore_mode: RESTORE_DEFAULT_OFF
    gamma_correct: 0.0
    default_transition_length: 0.75s
    min_value: 0
    max_value: 100
