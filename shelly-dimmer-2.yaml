# initial code taken from 
# https://github.com/esphome/issues/issues/3487

substitutions:
  # User-required substitutions
  device_site: "home"
  device_location: "bedroom01"
  device_location_name: "Bedroom 1"
  device_type: "dimr"
  device_type_name: "Dimmer"
  device_number: "089"
  device_ip: "0.0.0.0"

  # Optional user substitutions
  dimmer_min_level: "470" # from 0 to 1000
  dimmer_max_level: "1000" # from 0 to 1000
  dimmer_warmup_level: "250" # from 0 to 1000
  dimmer_gamma_correct: "0.0" # 2.8 is the default. 0.0 means linear (LEDs)
  dimmer_leading_edge: "false" # False for LEDs
  dimmer_update_stmfw: "false" # Automatically update the STM32 FW (not reversible as of today)
  dimmer_max_temp: "70" # (in °C) # For over-temperature portection

  # Project Substitutions (not intended for user substitution)
  device_name: "Dimmer 2"
  device_make: "Shelly"
  sw_version: "2024.2.13"

  # Adjust package URL to point to this file
  package_url: "github://mariodivece/esphometemplates/shelly-dimmer-2.yaml@main"

  # Diagnostics Substitutions
  loglevel: INFO
  timezone: "America/Mexico_City"

  # WiFi Substitutions
  apikey: !secret esp_key
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password
  ota_password: !secret ota_password

# Allow importing this package
dashboard_import:
  package_import_url: ${package_url}
  import_full_config: false

# Import packages
packages:
  standard_package:
    url: https://github.com/mariodivece/esphometemplates/
    ref: main
    refresh: 0d
    files:
      - standard/package-project.yaml
      - standard/package-diagnostics.yaml
      - standard/package-wifi.yaml

# Board and preferences
esp8266:
  board: esp01_1m
  restore_from_flash: true

# UART Connection between ESP and STM32 chips
uart:
    tx_pin: 1
    rx_pin: 3
    baud_rate: 115200

# Use the shelly_dimmer built-in platform
light:
    - platform: shelly_dimmer
      name: "Light" # Monochromatic
      id: dimmer
      leading_edge: ${dimmer_leading_edge}
      min_brightness: ${dimmer_min_level}
      max_brightness: ${dimmer_max_level}
      warmup_brightness: ${dimmer_warmup_level}
      restore_mode: RESTORE_DEFAULT_OFF
      default_transition_length: 1s
      gamma_correct: ${dimmer_gamma_correct}

      current:
        name: Current
        unit_of_measurement: "A"
        entity_category: "diagnostic"
        icon: "mdi:current-ac"
        device_class: "current"
        state_class: "measurement"
        accuracy_decimals: 1
        filters:
          - sliding_window_moving_average:
              window_size: 15
              send_every: 15
          - round: 1

      voltage:
        name: Voltage
        unit_of_measurement: "V"
        entity_category: "diagnostic"
        icon: "mdi:battery-charging-60"
        device_class: "voltage"
        state_class: "measurement"
        accuracy_decimals: 1
        filters:
          - sliding_window_moving_average:
              window_size: 15
              send_every: 15
          - round: 1

      power:
        name: Power
        unit_of_measurement: "W"
        entity_category: "diagnostic"
        icon: "mdi:lightning-bolt"
        device_class: "power"
        state_class: "measurement"
        accuracy_decimals: 1
        filters:
          - sliding_window_moving_average:
              window_size: 15
              send_every: 15
          - round: 1

      firmware:
        version: "51.6"
        update: false


sensor:
  # Setup the NTC (depends on resistance and ADC)
  # and setup over-temperature protection
  - platform: ntc
    sensor: temp_resistance_reading
    name: "Temperature"
    id: temperature
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    icon: "mdi:thermometer"
    calibration:
      b_constant: 3350
      reference_resistance: 10kOhm
      reference_temperature: 298.15K
    on_value:
      then:
        - if:
            condition:
              - sensor.in_range:
                  id: temperature
                  above: ${dimmer_max_temp}
              - light.is_on: dimmer
            then:
              - light.turn_off: 
                  id: dimmer
              - logger.log: "Switch turned off because temperature exceeded ${dimmer_max_temp}°C"
              - homeassistant.service:
                  service: persistent_notification.create
                  data:
                    title: Message from ${device_name}
                  data_template:
                    message: Switch turned off because temperature exceeded ${dimmer_max_temp}°C
    on_value_range:
      - above: ${dimmer_max_temp}
        then:
          - logger.log: "Temperature exceeded ${dimmer_max_temp}°C"
          - homeassistant.service:
              service: persistent_notification.create
              data:
                title: Message from ${device_name}
              data_template:
                message: Temperature exceeded ${dimmer_max_temp}°C
  
  # Thermistor definition
  - platform: resistance
    id: temp_resistance_reading
    sensor: temp_analog_reading
    configuration: DOWNSTREAM
    resistor: 32kOhm
  
  # Analog pin reading for the thermistor
  - platform: adc
    id: temp_analog_reading
    pin: A0

binary_sensor:
  - platform: gpio
    name: Dim Down
    id: sensor_dim_down
    pin:
      number: GPIO12
      mode: INPUT
    internal: false
    on_multi_click:
    - timing:
        - ON for at most 300ms
      then:
        - logger.log: "Physical short press (dim_down) trigger"
        - script.execute: script_turn_on_off
    - timing:
        - ON for at least 300ms
      then:
        - logger.log: "Physical long press (dim_down) trigger"
        - script.execute: script_dim_down_timer
        - script.execute: script_dim_down
    on_release:
      then:
        - if:
            condition:
              light.is_on:
                id: dimmer
            then:
              - logger.log: "Physical dim_down release trigger"
              - script.stop: script_dim_down_timer
              - logger.log: "Script_dim_down_timer stopped"
  - platform: gpio
    name: Dim Up
    id: sensor_dim_up
    pin:
      number: GPIO14
      mode: INPUT
    internal: false
    on_multi_click:
    - timing:
        - ON for at most 300ms
      then:
        - logger.log: "Physical short press (dim_up) trigger"
        - script.execute: script_turn_on_off
    - timing:
        - ON for at least 300ms   
      then:
        - logger.log: "Physical long press (dim_up) trigger"
        - script.execute: script_dim_up_timer
        - script.execute: script_dim_up
    on_release:
      then:
        - if:
            condition:
              light.is_on:
                id: dimmer
            then:
              - logger.log: "Physical dim_up release trigger"
              - script.stop: script_dim_up_timer
              - logger.log: "Script_dim_up_timer stopped"

button:
  - platform: template
    name: Dim Down
    on_press:
      then:
        - script.execute: script_dim_down_timer
        - script.execute: script_dim_down
  - platform: template
    name: Dim Up
    on_press:
      then:
        - script.execute: script_dim_up_timer
        - script.execute: script_dim_up
  - platform: template
    name: Dim Stop
    on_press:
      then:
        - logger.log: "Stopping timer script"
        - script.stop: script_dim_down_timer
        - script.stop: script_dim_up_timer

script:
  - id: script_dim_down_timer
    mode: restart     # script will be kept running for 5 seconds since the latest time the script is executed
    then:
      - logger.log: "Dim-down timer script started"
      - delay: 5s
      - logger.log: "Dim-down timer script finished"
  - id: script_dim_up_timer
    mode: restart     # script will be kept running for 5 seconds since the latest time the script is executed
    then:
      - logger.log: "Dim-up timer script started"
      - delay: 5s
      - logger.log: "Dim-up timer script finished"
  - id: script_dim_down
    mode: single     # script will run once
    then:
      - logger.log: "Dim-down script started"
      - while:
          condition:
            and:
              - script.is_running: script_dim_down_timer #makes sure that dimming will stop after the set period
              - light.is_on: dimmer #prevents dimming of a light that is off
              - lambda: 'return(id(dimmer).remote_values.get_brightness() >= 0.01);' #prevents the light from going off and prevents the script from running unnecessary long (it stops at 1% brightness)
          then:
            - light.dim_relative:
                id: dimmer
                relative_brightness: -0.5%
                transition_length: 0.01s
            - delay: 0.01s
      - logger.log: "Dim-down script finished"
  - id: script_dim_up
    mode: single     # script will run once
    then:
      - logger.log: "Dim-up script started"
      - while:
          condition:
            and:
              - script.is_running: script_dim_up_timer #makes sure that dimming will stop after the set period
              - light.is_on: dimmer #prevents dimming of a light that is off
              - lambda: 'return(id(dimmer).remote_values.get_brightness() <= 0.999);' #prevents the script from running unnecessary long (it stops at 100% brightness)
          then:
            - light.dim_relative:
                id: dimmer
                relative_brightness: 0.5%
                transition_length: 0.01s
            - delay: 0.01s
      - logger.log: "Dim-up script finished"
  - id: script_turn_on_off
    mode: single
    then:
      - logger.log: "Turn_on_off script started"
      - if:
          condition:
            light.is_on:
              id: dimmer
          then:
            - light.turn_off:
                id: dimmer
            - logger.log: "Light turned off"
          else:
            - light.turn_on:
                id: dimmer
                brightness: !lambda |-
                  return id(dimmer).remote_values.get_brightness();
            - logger.log: "Light turned on with previous brightness setting"