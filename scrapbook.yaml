# example taken from https://community.home-assistant.io/t/what-is-dashboard-import/422519/7
substitutions:
  usemac: "true"
  friendly: "Friendly Name Goes Here"
  uniquename: "yournamegoeshere"
  loglevel: DEBUG
  apikey: !secret esp_key
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password
  ota_password: !secret ota_password
  device_name: "Node32Sample"
  device_make: "BL24"
  sw_version: "2024.2.1"

esphome:
  name: "${uniquename}"
  friendly_name: "${friendly}"
  comment: "${device_name} by ${device_make}"
  name_add_mac_suffix: ${usemac}
  min_version: "2023.2.0"
  project:
    name: "${device_make}.${device_name}"
    version: "${sw_version}"

esp32:
  board: nodemcu-32s
  framework:
    type: arduino

dashboard_import:
  package_import_url: github://mariodivece/esphometemplates/scrapbook.yaml@main
  import_full_config: false

# Enable logging
logger:
  level: "${loglevel}"

# Enable Home Assistant API
api:
  encryption:
    key: "${apikey}"

# Enable OTA
ota:
  safe_mode: true
  password: !secret ota_password

# Enable WiFi and AP for captive portal
wifi:
  fast_connect: false
  power_save_mode: none
  ssid: "${wifi_ssid}"
  password: "${wifi_password}"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${uniquename}-setup"
    password: "${wifi_password}"

captive_portal:

# diagnostic output
text_sensor:
  - platform: template
    name: "Deployment Version"
    lambda: return {"${sw_version}"};
    icon: "mdi:tag"
    entity_category: diagnostic
  - platform: wifi_info
    ip_address:
      id: ip_address
      name: "IP Address"
      icon: "mdi:wan"
      
sensor:
  - platform: template
    id: internal_temp
    name: "Internal Temperature"
    icon: "mdi:thermometer"
    unit_of_measurement: "Â°C"
    entity_category: diagnostic
    disabled_by_default: true
    lambda: return temperatureRead();
  - platform: wifi_signal
    name: "${device_name} WiFi Signal"
    update_interval: 60s

# define global state variables
globals:
  - id: state_onoff
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: state_level
    type: float
    restore_value: no
    initial_value: '0.3'

# exposing configuration items example
number:
  - platform: template
    name: "Min Brightness"
    id: config_min_brightness
    unit_of_measurement: "%"
    icon: "mdi:car-cruise-control"
    min_value: 0.1
    max_value: 0.8
    step: 1
    mode: box
    update_interval: never
    optimistic: true
    entity_category: config

# complex functionality example
output:
  - id: light_output
    platform: ledc # ledc is the PWM platform for ESP32 chips.
    pin: GPIO2 # Pin name for the built-in LED of my nodemcu-32s

light:
  - platform: monochromatic
    name: "Built-in LED"
    id: pwm_led
    # This id must match the output id
    output: light_output

binary_sensor:
  - platform: gpio
    name: "Built-in Button"
    id: button
    pin:
      number: GPIO00
      inverted: True
    filters:
      - delayed_on: 50ms  
      - delayed_off: 50ms 
    on_click:
      then:
        - if:
            condition:
              light.is_off: pwm_led
            then:
              - light.turn_on:
                  id: pwm_led
                  brightness: !lambda |-
                    return id(state_level);
              - lambda: |-
                  id(state_onoff) = (true);
            else:
              light.turn_off: pwm_led
    on_press:
      then:
      - if:
          condition: 
              lambda: |-
                return id(state_onoff);
          then:
          - delay: 250ms
          - while:
              condition:
                binary_sensor.is_on: button
              then:
                - light.dim_relative:
                    id: pwm_led
                    relative_brightness: 2%
                    transition_length: 0.1s
                - delay: 0.1s
                - lambda: |-
                    id(state_level) = id(pwm_led).current_values.get_brightness();
          - lambda: |-
              id(state_onoff) = (false);
          else:
          - delay: 0.5s
          - while:
              condition:
                and:
                  - binary_sensor.is_on: button
                  - lambda: |-
                      return {id(pwm_led).current_values.get_brightness() > id(config_min_brightness).state};
              then:
                - light.dim_relative:
                    id: pwm_led
                    relative_brightness: -2%
                    transition_length: 0.1s
                - delay: 0.1s
                - lambda: |-
                    id(state_level) = id(pwm_led).current_values.get_brightness();
          - lambda: |-
              id(state_onoff) = (true);
